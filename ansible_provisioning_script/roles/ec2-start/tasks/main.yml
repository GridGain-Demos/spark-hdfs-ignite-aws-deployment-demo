---
- name: Create the ELB only listening gridgain rest port
  ec2_elb_lb:
    name: "{{ ec2_elb_name }}"
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    state: present
    region: "{{ ec2_region }}"
    zones:
      - "{{ ec2_zone }}"
    listeners:
      - protocol: "{{ ec2_elb_protocol }}"
        load_balancer_port: "{{ ec2_elb_load_balancer_port }}"
        instance_port: "{{ ec2_elb_instance_port }}"
  register: gg_elb
  when: ec2_elb_create == 'true'
          
- name: Provision AWS Instances
  ec2_improvise:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    key_name: "{{ ec2_key_name }}"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_instance_type }}"
    image: "{{ ec2_ami_id }}"
    region: "{{ ec2_region }}"
    vpc_subnet_id: "{{ ec2_subnet }}"
    assign_public_ip: yes
    wait: true
    exact_count: "{{ ec2_exact_count | int }}"
    count_tag:
      Name: "{{ ec2_instance_tags }}"
    instance_tags:
      Name: "{{ ec2_instance_tags }}"
    volumes: [ec2_root]
  register: servers

- ec2_instance_info:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: "stopped"
      key-name: "{{ ec2_key_name }}"
      tag:Name: "{{ ec2_instance_tags }}"
  register: stopped_instances

- name: Show debug information about all stopped nodes
  debug:
    msg: Debug information for stopped AWS Instances -> ID = {{ item.instance_id }} KeyName = {{ item.key_name }} 
  loop: "{{ stopped_instances.instances }}"

- name: Start all stopped instances
  ec2:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    key_name: "{{ ec2_key_name }}"
    region: "{{ ec2_region }}"
    instance_tags:
        Name: "{{ ec2_instance_tags }}"    
    instance_ids: '{{ item.instance_id }}'
    state: running
    wait: True
  loop: "{{ stopped_instances.instances }}"

- ec2_instance_info:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: "running"
      key-name: "{{ ec2_key_name }}"
      tag:Name: "{{ ec2_instance_tags }}"
  register: running_instances 

- name: Show debug information about all running nodes
  debug:
    msg: Debug information for running AWS Instances -> IP = {{ item.public_ip_address }} KeyName = {{ item.key_name }}
  loop: "{{ running_instances.instances }}"

- name: Add new instance to launched host group (Private IPs)
  add_host:
    group: launched
    debug: IP - "{{ item.private_ip_address }}"
    hostname: "{{ item.private_ip_address }}"
  loop: "{{ running_instances.instances }}"
  when: use_internal_ips == 'true'

- name: Wait for SSH to come up (Private IPs) 
  local_action: wait_for
                host={{ item.private_ip_address }}
                port=22
                state=started
  loop: "{{ running_instances.instances }}"
  when: use_internal_ips == 'true'

- name: Add new instance to launched host group (Public IPs)
  add_host:
    group: launched
    debug: IP - "{{ item.public_ip_address }}"
    hostname: "{{ item.public_ip_address }}"
  loop: "{{ running_instances.instances }}"
  when: use_internal_ips == 'false'

- name: Wait for SSH to come up (Public IPs)
  local_action: wait_for
                host={{ item.public_ip_address }}
                port=22
                state=started
  loop: "{{ running_instances.instances }}"
  when: use_internal_ips == 'false'

# ignore_errors required because our rest server isn't started yet and we can't pass the health
- name: Add each EC2 instance to the ELB
  ec2_elb:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    state: present
    ec2_elbs: "{{ ec2_elb_name }}"
    region: "{{ ec2_region }}"
    instance_id: "{{ item.id }}"
  with_items: "{{ servers.tagged_instances }}"
  ignore_errors: yes
  when: ec2_elb_create == 'true'
